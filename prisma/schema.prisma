generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Mahasiswa
  Dosen_Wali
  Kepala_Program_Studi
}

enum ProgramStudi {
  Teknik_Informatika
  Sistem_Teknologi_Informasi
}

model User {
  id           String  @id @default(cuid())
  username     String  @unique
  password     String
  role         Role
  fullName     String
  nim          String?
  DosenId      String?
  
  programStudi ProgramStudi?
  
  // RSA key pair for this user
  publicKey    String?
  privateKey   String?
  
  createdAt    DateTime @default(now())
  
  // Relations
  advisor      User?   @relation("AdvisorStudent", fields: [DosenId], references: [id])
  students     User[]  @relation("AdvisorStudent")
  records      Transkrip[]
  shares       SecretShare[]
  directKeys   DirectKey[]
  sessions     Session[]
  
  @@map("users")
}

// Academic record storage - enhanced for program-based access control
model Transkrip {
  id               String   @id @default(cuid())
  studentId        String
  
  // Encrypted data
  encryptedData    String   @db.Text
  digitalSignature String   @db.Text
  keyId           String
  
  createdAt       DateTime @default(now())
  createdBy       String
  
  // Relations
  student         User     @relation(fields: [studentId], references: [id])
  shares          SecretShare[]  // For group access
  directKeys      DirectKey[]    // For direct access
  
  @@map("academic_records")
}

// Rest of the models remain the same...
model DirectKey {
  id        String @id @default(cuid())
  recordId  String
  userId    String
  encryptedAESKey String @db.Text
  createdAt DateTime @default(now())
  
  record    Transkrip @relation(fields: [recordId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  
  @@unique([recordId, userId]) 
  @@map("direct_keys")
}

model SecretShare {
  id        String @id @default(cuid())
  recordId  String
  advisorId String
  
  shareX    Int
  shareY    String
  prime     String
  
  createdAt DateTime @default(now())
  
  record    Transkrip @relation(fields: [recordId], references: [id], onDelete: Cascade)
  advisor   User      @relation(fields: [advisorId], references: [id])
  
  @@unique([recordId, advisorId])
  @@map("secret_shares")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}